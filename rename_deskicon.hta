<!doctype html>
<html>
<head>
    <title>桌面图标改名工具</title>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <meta http-equiv="MSThemeCompatible" content="Yes" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <script type="text/javascript" src="tps/tps.js"></script>
    <script type="text/javascript" src="json2.js"></script>
    <script language="javascript">
        tps.sys.RestartHTA(true, true);
    </script>
    <hta:application id="RenameIcon" scroll="no" icon="explorer.exe" />
    <style type="text/css">
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        input {
            width: 90%;
        }

        textarea {
            width: 100%;
            word-break: break-all;
        }

        button {
            vertical-align: middle;
            padding: 4px 6px 1px;
            margin: 1px 1px 10px 15px;
        }

        .ref {
            color: blue;
            cursor: default;
        }

        .em {
            color: green;
        }

        .warning {
            color: red;
        }
    </style>
    <script language="javascript">
        function Init() {
            tps.log.AddHtmlElementDevice(document.getElementById("log"));
        }

        function Item(t) {
            return document.getElementById(t);
        }
        // returns succeeded elements
        function DoRename(renameMap) {
            var succeededMap = {};
            for (var path1 in renameMap) {
                var path2 = renameMap[path1];
                try {
                    fso.MoveFile(path1, path2);
                    succeededMap[path1] = path2;
                    tps.log.Event("movefile succeeded: {0} -> {1}".format(path1, path2));
                } catch (e) {
                    tps.log.Error("movefile failed: {0} --> {1}".format(path1, path2));
                }
            }
            return succeededMap;
        }
        function SaveRenameMap(renameMap) {
            var logfile = tps.sys.GetScriptDir() + "\\" + "rename.log";
            var text = JSON.stringify(renameMap, null, "\n");
            tps.file.WriteTextFileSimple(text, logfile);
        }
        function LoadRenameMap() {
            var renameMap = {};
            var logfile = tps.sys.GetScriptDir() + "\\" + "rename.log";
            var text = tps.file.ReadTextFileSimple(logfile);
            if (text) renameMap = JSON.parse(text);
            return renameMap;
        }
        function Run() {
            var historyRenameMap = LoadRenameMap();
            var renameMap = {};
            var desktopSelf = shellapp.Namespace(0x10).Self.Path;
            var desktopAll = shellapp.Namespace(0x19).Self.Path;
            tps.util.MergeProperty(renameMap, GenerateRenameMap(desktopSelf));
            tps.util.MergeProperty(renameMap, GenerateRenameMap(desktopAll));
            tps.log.Event("开始改名{0}个文件".format(Object.keys(renameMap).length.toString()));
            var succeededMap = DoRename(renameMap);
            tps.util.MergeProperty(historyRenameMap, succeededMap);
            SaveRenameMap(historyRenameMap);
            tps.log.Event("改名完成");
            alert("改名完成, 已经在当前目录下创建了rename.log文件供将来恢复");
        }
        function Restore() {
            var historyRenameMap = LoadRenameMap();
            tps.log.Event("开始恢复{0}个文件".format(Object.keys(historyRenameMap).length.toString()));
            // invert key and value
            var renameMap = {};
            for (var path1 in historyRenameMap) {
                renameMap[historyRenameMap[path1]] = path1;
            }
            DoRename(renameMap);
            SaveRenameMap({});
            tps.log.Event("恢复完成");
        }
        function GenerateRenameMap(path) {
            var occupiedName = {};
            var renameMap = {};
            var renameOperation = [];

            var filelist = [];
            var fc = new Enumerator(fso.GetFolder(path).files);
            for (var n = 0; !fc.atEnd() ; fc.moveNext()) {
                var f = fc.item();
                filelist.push(f.Name);
                occupiedName[f.Name] = true;
            }

            var n = 1;
            for (var i = 0; i < filelist.length; i++) {
                var oldName = filelist[i];
                if (NeedRename(oldName)) {
                    var newName = "";
                    do {
                        newName = BlankName(n++) + ".lnk";
                    } while (occupiedName[newName]);
                    occupiedName[newName] = true;
                    var path1 = path + "\\" + oldName;
                    var path2 = path + "\\" + newName;
                    renameMap[path1] = path2;
                }
            }
            return renameMap;
        }
        function EditSelf() {
            shell.Run('notepad "{0}"'.format(tps.sys.GetScriptPath()));
        }
        function BinCode(n, chars) {
            var code = "";
            var m = chars.length;
            do {
                code += chars.charAt(n % m);
                n = Math.floor(n / m);
            } while (n > 0);
            return code;
        }
        function BlankName(n) {
            return BinCode(n, " 　");
        }
        function NeedRename(f) {
            if (!f.match(/^.*\.lnk$/)) return false;
            if (f.match(/^[ 　]+\.lnk$/)) return false;
            return true;
        }
    </script>
</head>
<body onload="Init()" onkeydown="if (event.keyCode == 27) window.close()">
    <button onclick="Run()">开始改名</button>
    <button onclick="Restore()">恢复原名</button>
    <br />
    <hr />
    <div id="note">
        说明：<br />
        <a href="#" onclick="EditSelf()">本工具</a>通过把桌面上的图标改名成空格，来达到隐藏桌面图标文字的目的。<br />
        <br />
        <span class="warning">注意：只会更改桌面上的快捷方式文件(.lnk)，其他文件不会被改名。</span><br />
    </div>
    <pre id="errors" style="display: none;">
      </pre>
    <div id="log"></div>
</body>
</html>
